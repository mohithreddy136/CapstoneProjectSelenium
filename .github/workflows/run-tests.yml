# Name of the GitHub Actions workflow.
name: Selenium Test Suite

# Controls when the action will run.
on:
  # Triggers the workflow on push events but only for the main branch.
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a job called "test".
  test:
    # --- CHANGE --- Run this job on ubuntu-latest and windows-latest.
    # We use a strategy matrix to run tests across different browsers and OS.
    runs-on: ${{ matrix.os }}
    strategy:
      # Do not cancel other jobs if one fails.
      fail-fast: false
      matrix:
        # Define the combinations of OS and browser to test.
        include:
          - os: ubuntu-latest
            browser: chrome
          - os: ubuntu-latest
            browser: firefox
          - os: windows-latest
            browser: chrome
          - os: windows-latest
            browser: firefox
          - os: windows-latest
            browser: edge

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Sets up a Python environment for use in actions.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify the Python version you want to use.

      # Step 3: Install all project dependencies from the requirements.txt file.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run the Pytest test suite.
      # --- CHANGE --- Pass the browser from the matrix to pytest.
      # We also create uniquely named reports for each job.
      - name: Run Pytest tests
        run: pytest --browser ${{ matrix.browser }} --alluredir=allure-results-${{ matrix.browser }}-${{ matrix.os }} --html=pytest-report-${{ matrix.browser }}-${{ matrix.os }}.html
        continue-on-error: true

      # Step 5: Upload the simple Pytest HTML report as an artifact.
      # --- CHANGE --- Use the unique report name.
      - name: Upload Pytest HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-html-report-${{ matrix.browser }}-${{ matrix.os }}
          path: pytest-report-${{ matrix.browser }}-${{ matrix.os }}.html

      # Step 6: Upload the Allure results for this job.
      # --- CHANGE --- Upload the unique Allure results directory.
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}-${{ matrix.os }}
          path: allure-results-${{ matrix.browser }}-${{ matrix.os }}/

  # This new job, "generate-report", will run only after all "test" jobs are complete.
  generate-report:
    # It needs the "test" job to finish, even if tests failed.
    needs: test
    if: always()
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download all the Allure results artifacts from the "test" jobs.
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts that start with "allure-results-"
          pattern: allure-results-*
          path: allure-results
          merge-multiple: true # This automatically merges all downloaded artifacts into one directory

      # Step 2: Generate the final, combined Allure Report.
      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        with:
          # Use the merged results directory
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      # Step 3: Upload the final, combined Allure Report artifact.
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

